---
title: "Outbreak_Analysis"
author: "Kathryn Fillman"
format: html
editor: visual
---

# HPAI Outbreak Analysis

## Command Hints:

Add new chunk: *Ctrl+Alt+I*\
Render document: *Shift+Ctrl+k*\
run chunk: *Ctrl+shift+enter*\
*If you want something on a newline, make sure to put 2 spaces after it*

## Import data & libraries

```{r Data & Library Import, inlcude = FALSE}
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)

banding <- read.csv("Outbreak_data/Banding_recov_.csv")
FIPS_codes <- read.csv("Outbreak_data/FIPS_Region_Codes.csv")
world_outbreak_data <- read_excel("Outbreak_data/Outbreak_H5_H5N1_2020_Sept2023_World.xlsx", sheet = "outbreaks")
```

## Data Cleaning

```{r Cleaning World Outbreak data}
world_outbreak_data$Outbreak_start_date <- as_date(world_outbreak_data$Outbreak_start_date)
world_outbreak_data$Outbreak_end_date <- as_date(world_outbreak_data$Outbreak_end_date)
world_outbreak_data$outbreak_dates <- interval(world_outbreak_data$Outbreak_start_date, world_outbreak_data$Outbreak_end_date)
```

## Create List of First US Casess

```{r Create list of first US cases}
First_US_Cases <- filter(world_outbreak_data, iso_code=='USA') %>% select(Outbreak_start_date, outbreak_dates, level2_name, level1_name, country_unique_code) %>% arrange(Outbreak_start_date) %>% distinct(level1_name, .keep_all = TRUE)
```

## Create list of connections to/within the US

```{r}
US_connections <- banding %>% filter_all(any_vars(. %in% 'US')) %>% filter(!(FIPS_ADMIN_banding==FIPS_ADMIN_Recov)) %>% select(FIPS_ADMIN_banding, FIPS_ADMIN_Recov)
US_connections <- right_join(FIPS_codes, US_connections, by=c( 'FIPS.Region.Code'='FIPS_ADMIN_banding'))
US_connections <- right_join(FIPS_codes, US_connections, by=c( 'FIPS.Region.Code'='FIPS_ADMIN_Recov'))
```

## Find Connections to First State

### Create list of connections between state & worldwide locations

```{r}
state_connections <- US_connections %>% filter(State_Province.x=='South Carolina' | State_Province.y=='South Carolina')
```

### Create list of candidate sources

infectious_date is first day of state infection - minimum time before symptoms arise

```{r}
infectious_date <- as_date(as.numeric (First_US_Cases [First_US_Cases$level1_name== 'South Carolina', 1])-3)
```

Filter outbreak data to include only locations with timely outbreaks
Then filter again to include only locations that have connections to that state

```{r}
candidate_sources <- world_outbreak_data %>%
  filter((infectious_date %within% outbreak_dates) & (Outbreak_start_date < infectious_date)) %>%
  filter(iso_code %in% state_connections$ISO.3166.1.alpha.3.x | iso_code %in% state_connections$ISO.3166.1.alpha.3.y)
```

Add columns to identify the state for each source & that state's first outbreak
```{r}
candidate_sources$state <- 'South Carolina'
candidate_sources$state_first_infection <- infectious_date+3
```


## Create connection-finding function
```{r}
connection_finder <- function(state) {
  state_connections <- US_connections %>% filter(
    State_Province.x==state | State_Province.y==state)
  infectious_date <- as_date(as.numeric(
    First_US_Cases[First_US_Cases$level1_name==state, 1])-3)
  state_sources <- world_outbreak_data %>%
  filter((infectious_date %within% outbreak_dates) & (Outbreak_start_date < infectious_date)) %>%
  filter(iso_code %in% state_connections$ISO.3166.1.alpha.3.x | iso_code %in% state_connections$ISO.3166.1.alpha.3.y)
  state_sources$state <- state
  state_sources$state_first_infection <- infectious_date+3
  candidate_sources <<- rbind(candidate_sources, state_sources)
}
```

## Create list of potential sources for each state
Use connection_finder function
```{r}
for (level1_name in tail(First_US_Cases$level1_name, -1)) {
  connection_finder(level1_name)
}
```

Select subset of meaningful variables
```{r}
candidate_sources <- candidate_sources %>%
  select(state, state_first_infection, iso_code, country,
         region, reporting_level, strain_eng, sero_sub_genotype_eng,  disease_eng, Outbreak_id, level3_name, level2_name, level1_name, susceptible,	cases,	dead,	killed_disposed,	slaughtered,	vaccinated,	morbidity,	mortality)
```

## Create summary of candidate source locations

```{r}
source_summary <- candidate_sources %>% group_by(state, state_first_infection, country, level1_name, level2_name, level3_name) %>% count %>% arrange(state_first_infection)
```

Print counts of candidate sources per country
```{r}
candidate_sources %>% group_by(country) %>% count() %>% arrange(desc(n))
```
Do the same for level1_names (not including US)
```{r}
candidate_sources %>% filter(country != 'United States of America') %>% group_by(level1_name) %>% count() %>% arrange(desc(n))
```

## Export Data

Rename columns
```{r}
colnames(First_US_Cases) <- c('Outbreak Start Date', 'Outbreak Date Range', 'County', 'State', 'Country')
```


### Write to documents

```{r}
write.csv(source_summary,"IAV_Source_Summary.csv", row.names = FALSE)
write.csv(candidate_sources,"Candidate_Source_List.csv", row.names = FALSE)
write.csv(First_US_Cases,"US_First_Outbreaks.csv", row.names = FALSE)
```
