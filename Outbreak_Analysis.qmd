---
title: "Outbreak_Analysis"
author: "Kathryn Fillman"
format: html
editor: visual
---

# HPAI Outbreak Analysis

# Creating Candidate Source List

## Import data & libraries

```{r Data & Library Import, echo = FALSE}
library(tidyverse)
library(dplyr)
library(lubridate)
library(readxl)

banding <- read.csv("Outbreak_data/Banding_recov_.csv")
FIPS_codes <- read.csv("Outbreak_data/FIPS_Region_Codes.csv")
world_outbreak_data <- read_excel("Outbreak_data/Outbreak_H5_H5N1_2020_Sept2023_World.xlsx", sheet = "outbreaks")
```

## Data Cleaning

```{r Cleaning World Outbreak data}
world_outbreak_data$Outbreak_start_date <- as_date(world_outbreak_data$Outbreak_start_date)
world_outbreak_data$Outbreak_end_date <- as_date(world_outbreak_data$Outbreak_end_date)
world_outbreak_data$outbreak_dates <- interval(world_outbreak_data$Outbreak_start_date, world_outbreak_data$Outbreak_end_date)
```

## Create List of First US Casess

```{r Create list of first US cases}
First_US_Cases <- filter(world_outbreak_data, iso_code=='USA') %>% select(country_unique_code, level1_name, level2_name, Latitude, Longitude, Outbreak_start_date, outbreak_dates, reporting_level, strain_eng, sero_sub_genotype_eng,  disease_eng) %>% arrange(Outbreak_start_date) %>% distinct(level1_name, .keep_all = TRUE)
```

## Create Candiate Source List

Create list of connections to/within the US using banding and FIPS. Need FIPS doc because banding uses FIPS and world outbreak data uses ISO3.

```{r}
US_connections <- banding %>% filter_all(any_vars(. %in% 'US')) %>% filter(!(FIPS_ADMIN_banding==FIPS_ADMIN_Recov))  %>% left_join(FIPS_codes, by=c('FIPS_ADMIN_banding'='FIPS.Region.Code')) %>% left_join(FIPS_codes, by=c('FIPS_ADMIN_Recov'='FIPS.Region.Code'))
```

Create list of connections between state & worldwide locations beginning with first state in `First_US_Cases` (South Carolina). The remainder of this section will be proof of concept for the function created later.
```{r}
state_connections <- US_connections %>% filter(State_Province.x=='South Carolina' | State_Province.y=='South Carolina')
```

infectious_date is first day of state infection - minimum time before symptoms arise

```{r}
infectious_date <- as_date(as.numeric (First_US_Cases [First_US_Cases$level1_name== 'South Carolina', "Outbreak_start_date"])-3)
```

Filter outbreak data to include only locations with timely outbreaks Then filter again to include only locations that have connections to that state

```{r}
candidate_sources <- world_outbreak_data %>%
  filter((infectious_date %within% outbreak_dates) & (Outbreak_start_date < infectious_date)) %>%
  filter(iso_code %in% state_connections$ISO.3166.1.alpha.3.x | iso_code %in% state_connections$ISO.3166.1.alpha.3.y)
```

Add columns to identify the state for each source & that state's first outbreak

```{r}
candidate_sources <- candidate_sources %>% mutate(state='South Carolina', state_first_infection=(infectious_date+3))
```

Create connection-finding function

```{r}
connection_finder <- function(state) {
  state_connections <- US_connections %>% filter(State_Province.x==state | State_Province.y==state)
  infectious_date <- as_date(as.numeric(First_US_Cases[First_US_Cases$level1_name==state, "Outbreak_start_date"])-3)
  state_sources <- world_outbreak_data %>%
  filter((infectious_date %within% outbreak_dates) & (Outbreak_start_date < infectious_date)) %>%
    filter(iso_code %in% state_connections$ISO.3166.1.alpha.3.x | iso_code %in% state_connections$ISO.3166.1.alpha.3.y)
  state_sources <- state_sources %>% mutate(state=state, state_first_infection=(infectious_date+3))
  candidate_sources <<- rbind(candidate_sources, state_sources)
}
```

Create list of potential sources for each state using connection_finder function

```{r}
for (level1_name in tail(First_US_Cases$level1_name, -1)) {
  connection_finder(level1_name)
}
```

Select subset of meaningful variables

```{r}
candidate_sources <- candidate_sources %>%
  select(state, state_first_infection,iso_code, country, country_unique_code, region, reporting_level, strain_eng, sero_sub_genotype_eng,  disease_eng, Outbreak_id, Latitude, Longitude, Outbreak_start_date, level3_name, level2_name, level1_name)
```


# Analysis

## Using candidate_sources

Number of potential source events including & excluding US
```{r}
candidate_sources %>% distinct(Outbreak_id, .keep_all = TRUE)%>% nrow()
candidate_sources %>% filter(country_unique_code!='USA') %>% distinct(Outbreak_id, .keep_all = TRUE) %>% nrow()
```

Find potential source countries & their number of distinct events
```{r}
candidate_sources %>% filter(country_unique_code!='USA') %>% distinct(Outbreak_id, .keep_all = TRUE) %>% count(country) %>% arrange(desc(n))
```

POTENTIAL USE: limit time_to_infection
```{r}
candidate_sources %>% 
  mutate(time_to_infection=(state_first_infection-Outbreak_start_date)) %>%
  filter(time_to_infection<90) %>%
  select(time_to_infection) %>%
  summarise(mean=mean(time_to_infection))
```



Average time between state first infection and potential source (per state).
```{r}
candidate_sources %>% group_by(state) %>% filter(country_unique_code!='USA') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date))
```

Overall time between infection and outbreak
```{r}
candidate_sources %>% filter(country_unique_code!='USA') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Excluding Americas - way longer average
```{r}
candidate_sources %>% filter(region!='Americas') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Just Canada
```{r}
candidate_sources %>% filter(country=='Canada') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```

### Average Warning Times Per Proposed Monitoring Locations

Victoria, British Columbia, Canada
```{r}
candidate_sources %>% filter(level3_name=='Victoria') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Edmonton, Alberta, Canada
```{r}
candidate_sources %>% filter(level3_name=='Edmonton') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Regina, Saskatchewan, Canada
```{r}
candidate_sources %>% filter(level3_name=='Regina') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Winnipeg, Manitoba, Canada
```{r}
candidate_sources %>% filter(level3_name=='Winnipeg') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Toronto, Ontario, Canada
```{r}
candidate_sources %>% filter(level3_name=='Toronto') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Regina, Saskatchewan, Canada
```{r}
candidate_sources %>% filter(level3_name=='Regina') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Regina, Saskatchewan, Canada
```{r}
candidate_sources %>% filter(level3_name=='Regina') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```
Regina, Saskatchewan, Canada
```{r}
candidate_sources %>% filter(level3_name=='Regina') %>% summarise(time_to_infection=mean(state_first_infection-Outbreak_start_date), min=min(state_first_infection-Outbreak_start_date), max=max(state_first_infection-Outbreak_start_date))
```

## Export Data

Write to documents

```{r}
write.csv(candidate_sources,"Candidate_Source_List.csv", row.names = FALSE)
write.csv(First_US_Cases,"US_First_Outbreaks.csv", row.names = FALSE)
```
